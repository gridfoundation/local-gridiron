package keeper

import (
	"context"
	"github.com/anonymous/checkers/x/checkers/rules"
	"strconv"

	"github.com/anonymous/checkers/x/checkers/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
)

func (k msgServer) CreateGame(goCtx context.Context, msg *types.MsgCreateGame) (*types.MsgCreateGameResponse, error) {
    ctx := sdk.UnwrapSDKContext(goCtx)

    nextGame, found := k.Keeper.GetNextGame(ctx)
    if !found {
        panic("NextGame not found")
    }
    newIndex := strconv.FormatUint(nextGame.IdValue, 10)
    newGame := rules.New()
    storedGame := types.StoredGame{
        Index:     newIndex,
        Game:      newGame.String(),
        Turn:      rules.PieceStrings[newGame.Turn],
        Red:       msg.Red,
        Black:     msg.Black,
        MoveCount: 0,
        BeforeId:  types.NoFifoIdKey,
        AfterId:   types.NoFifoIdKey,
        Deadline:  types.FormatDeadline(types.GetNextDeadline(ctx)),
        Winner:    rules.PieceStrings[rules.NO_PLAYER],
        Wager:     msg.Wager,
    }
    err := storedGame.Validate()
    if err != nil {
        return nil, err
    }
    k.Keeper.SendToFifoTail(ctx, &storedGame, &nextGame)
    k.Keeper.SetStoredGame(ctx, storedGame)

    nextGame.IdValue++
    k.Keeper.SetNextGame(ctx, nextGame)

    return &types.MsgCreateGameResponse{
        IdValue: newIndex,
    }, nil
}
